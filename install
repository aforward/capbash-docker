#!/bin/bash
[[ -z "$INFO_LEVEL" ]] && source ./submodules/bootstrap/logging
set -euo pipefail ; IFS=$'\n\t'

#-----------
# Configurations
#-----------

export DOCKER_LAUNCHER_DIR=${DOCKER_LAUNCHER_DIR-/var/local/docker}
LAUNCHER_OWNER=${LAUNCHER_OWNER-$USER}
DOCKER_SUPPORT_LXC=${DOCKER_SUPPORT_LXC-false}
DOCKER_FORCE_INSTALL=${DOCKER_FORCE_INSTALL-false}

#-----------
# Install Script
#-----------

notify "Installing DOCKER ($OS)..."

if [[ "$LOGLEVEL" -le "$DEBUG_LEVEL" ]]; then
  DOCKER_OUTPUT=${DOCKER_LAUNCHER_DIR}/docker_install.log
else
  DOCKER_OUTPUT=/dev/null
fi

if [[ "$DOCKER_FORCE_INSTALL" == true ]]; then
  notify "  -- forcing a install of docker if it already existed"
  if [[ -e ${DOCKER_LAUNCHER_DIR}/kill ]]; then
    ${DOCKER_LAUNCHER_DIR}/kill
  fi
  rm -rf ${DOCKER_LAUNCHER_DIR}
fi

OWNER=$LAUNCHER_OWNER ./submodules/bootstrap/mkdir DOCKER_LAUNCHER_DIR

if [[ "$OS" == "ubuntu" ]]; then
  if [[ -z "`which ufw 2> /dev/null`"  ]] && [[ ! -e "${DOCKER_LAUNCHER_DIR}/ufw.done" ]]; then
    notify "  -- Configuring /etc/default/ufw"
    mkdir -p /etc/default
    sed -i 's|DEFAULT_FORWARD_POLICY="DROP"|DEFAULT_FORWARD_POLICY="ACCEPT"|g' /etc/default/ufw
    ufw reload > $DOCKER_OUTPUT 2>&1
    debug_all $DOCKER_OUTPUT
    ufw allow 4243/tcp > $DOCKER_OUTPUT 2>&1
    debug_all $DOCKER_OUTPUT
    touch "${DOCKER_LAUNCHER_DIR}/ufw.done"
  else
    debug "  -- Already configured /etc/default/ufw"
  fi
fi

if [[ "$DOCKER_FORCE_INSTALL" == true ]] || [[ "`which docker 2> /dev/null`" == "" ]]; then
  notify "  -- install docker.io"
  if [[ "$OS" == "ubuntu" ]]; then
    apt-get update
    apt-get install -y docker.io
    ln -sf /usr/bin/docker.io /usr/local/bin/docker
    sed -i '$acomplete -F _docker docker' /etc/bash_completion.d/docker.io

    [ -e /usr/lib/apt/methods/https ] || {
      apt-get update
      apt-get install -y apt-transport-https
    }

    apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 36A1D7869245C8950F966E92D8576A8BA88D21E9

    apt-get install -y curl
    curl -s https://get.docker.io/ubuntu/ | sh
  elif [[ "$OS" == "mac" ]]; then
    error "Please install boot2docker (https://docs.docker.com/installation/mac/)"
    exit 1
  else
    # subscription-manager repos --enable=rhel-7-server-extras-rpms
    yum install -y docker-io
    yum update -y docker-io
  fi
fi

notify "  -- Running `docker --version`"

if [[ "$DOCKER_SUPPORT_LXC" == true ]]; then
  debug "  -- adding LXC support"
  apt-get install -y lxc
  cp ./submodules/docker/files/conf /etc/default/docker
fi

notify "  -- Installing helper scripts"
TEMPLATE=./submodules/docker/files/purge LOCATION=$DOCKER_LAUNCHER_DIR/purge ./submodules/docker/copyif
TEMPLATE=./submodules/docker/files/kill LOCATION=$DOCKER_LAUNCHER_DIR/kill ./submodules/docker/copyif
TEMPLATE=./submodules/docker/files/clean LOCATION=$DOCKER_LAUNCHER_DIR/clean ./submodules/docker/copyif
TEMPLATE=./submodules/docker/files/shell LOCATION=$DOCKER_LAUNCHER_DIR/shell ./submodules/docker/copyif

if [[ "$OS" != "mac" ]] && [[ "`service docker status | grep process`" == "" ]] && [[ "`service docker status | grep \"is running\"`" == "" ]]; then
  notify "  -- restarting service"
  service docker restart
fi

if [[ "$OS" == "mac" ]]; then
  if [[ "$(docker ps 2>&1)" == *"Cannot connect to the Docker daemon"* ]]; then
    error "Please run 'source $DOCKER_LAUNCHER_DIR/shell' to enable docker in your shell, and then re-run your deploy script"
    exit 1
  fi
fi

notify "DONE, Installing DOCKER."